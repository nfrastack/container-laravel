# SPDX-FileCopyrightText: Â© 2025 Nfrastack <code@nfrastack.com>
#
# SPDX-License-Identifier: MIT

laravel_update_env() {
    print_debug "Updating .env '$1' with '$2' value"
    if [[ $2 = *[[:space:]]* ]] ; then
        sed -i --follow-symlinks "s|${1}=.*|$1=\"$2\"|g" "${NGINX_WEBROOT}"/.env
    else
        sed -i --follow-symlinks "s|${1}=.*|$1=$2|g" "${NGINX_WEBROOT}"/.env
    fi
}

laravel_configure_db() {
    print_debug "Updating DB Information"
    ## MariaDB
    update_env DB_DATABASE "${DB_NAME}"
    update_env DB_HOST "${DB_HOST}"
    update_env DB_PASSWORD "${DB_PASS}"
    update_env DB_PORT "${DB_PORT}"
    update_env DB_USERNAME "${DB_USER}"
}

laravel_configure_laravel() {
    print_debug "Updating Laravel Information"
    update_env APP_NAME "${APP_NAME}"
    update_env APP_URL "${SITE_URL}"
    update_env APP_ENV "${STAGE}"
    update_env APP_DEBUG "${APP_DEBUG}"
    update_env BROADCAST_DRIVER ${BROADCAST_DRIVER}
    update_env CACHE_DRIVER ${CACHE_DRIVER}
    update_env MEDIA_DISK "${MEDIA_DISK}"
    mkdir -p "${NGINX_WEBROOT}"/public/"${MEDIA_DISK}"
    mkdir -p "${NGINX_WEBROOT}"/public/uploads/
    update_env SESSION_DRIVER ${SESSION_DRIVER}
    update_env SESSION_LIFETIME ${SESSION_LIFETIME}
}


laravel_configure_mail() {
    print_debug "Updating Mail"
    update_env MAIL_ENCRYPTION "${SMTP_ENCRYPTION}"
    update_env MAIL_FROM_ADDRESS "${MAIL_FROM_ADDRESS}"
    update_env MAIL_FROM_NAME "${MAIL_FROM_NAME}"
    update_env MAIL_HOST "${SMTP_HOST}"
    update_env MAIL_PASSWORD ${SMTP_PASS}
    update_env MAIL_PORT ${SMTP_PORT}
    update_env MAIL_TYPE "${MAIL_TYPE}"
    update_env MAIL_USERNAME ${SMTP_USER}
}

laravel_configure_ldap() {
    print_debug "Updating LDAP"
    sanity_var LDAP_HOST "LDAP Hostname"
    sanity_var LDAP_BASE_DN "LDAP Base DN"
    sanity_var LDAP_BIND_USER "LDAP Bind User"
    sanity_var LDAP_BIND_PASS "LDAP Bind Password"

    update_env LDAP_BASE_DN ${LDAP_BASE_DN}
    update_env LDAP_CONNECTION ${LDAP_CONNECTION}
    update_env LDAP_HOST ${LDAP_HOST}
    update_env LDAP_LOGGING "${LOG_LDAP}"
    update_env LDAP_PASSWORD "${LDAP_BIND_PASS}"
    update_env LDAP_PORT ${LDAP_PORT}
    update_env LDAP_SSL ${LDAP_SSL}
    update_env LDAP_TIMEOUT ${LDAP_TIMEOUT}
    update_env LDAP_TLS ${LDAP_TLS}
    update_env LDAP_USERNAME "${LDAP_BIND_USER}"
}

laravel_configure_logging() {
    print_debug "Updating Logging"
    if [ "${CONTAINER_LOG_LEVEL,,}" = "debug" ] ; then
        LOG_LEVEL=debug
    fi
    update_env LOG_CHANNEL "${LOG_CHANNEL}"
    update_env LOG_LEVEL "${LOG_LEVEL}"
}

laravel_configure_app_key() {
    cd "${NGINX_WEBROOT}"
    chown "${NGINX_USER}":"${NGINX_GROUP}" "${NGINX_WEBROOT}"/.env
    silent sudo -u "${NGINX_USER}" php artisan key:generate --force
}

laravel_setup_webroot() {
    if [ ! -f "${NGINX_WEBROOT}/artisan" ]; then
        print_warn "Potential New Installation / Standalone Laravel Application detected"
        chown -R "${NGINX_USER}":"${NGINX_GROUP}" \
                                                    "${NGINX_WEBROOT}" \
                                                    /var/cache/nginx
        print_info "Installing Base Laravel Application"
        cd "${NGINX_WEBROOT}"

        silent sudo -u "${NGINX_USER}" \
                                composer create \
                                    laravel/laravel \
                                        "${NGINX_WEBROOT}" \
                                            --no-interaction \
                                            --no-progress \
                                            --no-scripts \
                                            --prefer-dist

        print_info "Installing Node dependencies"
        silent sudo -u "${NGINX_USER}" \
                                         npm \
                                            install
    fi

    if [ ! -f "${NGINX_WEBROOT}"/.gitignore ] ; then
        print_debug "Creating .gitignore file"
        cat /container/data/laravel/gitignore | silent sudo -u "${NGINX_USER}" tee "${NGINX_WEBROOT}"/.gitignore
    fi
}

laravel_volatile_setup() {
    case "${@,,}" in
        config )
            if [ ! -d "${CONFIG_PATH}" ]; then
                print_info "Creating Config Directory"
                mkdir -p "${CONFIG_PATH}"
            fi

            if [ -s "${NGINX_WEBROOT}"/.env ]; then
                if [ ! -s "${CONFIG_PATH}"/"${CONFIG_FILE}" ]; then
                    print_info "Copying .env to Config Directory"
                    cp "${NGINX_WEBROOT}"/.env "${CONFIG_PATH}"/"${CONFIG_FILE}"
                else
                    print_warn "Config File already exists, skipping copy"
                fi
            fi
            rm -rf "${NGINX_WEBROOT}"/.env
            ln -sf "${CONFIG_PATH}"/"${CONFIG_FILE}" "${NGINX_WEBROOT}"/.env
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${CONFIG_PATH}"
        ;;
        log )
            if [ ! -d "${LOG_PATH}" ]; then
                print_info "Creating Log Directory"
                mkdir -p "${LOG_PATH}"
            fi

            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${LOG_PATH}"
            rm -rf "${NGINX_WEBROOT}"/storage/logs
            ln -sf "${LOG_PATH}" "${NGINX_WEBROOT}"/storage/logs
            create_logrotate laravel /www/logs/laravel/laravel.log
        ;;
        storage )
            if [ ! -d "${STORAGE_PATH}" ]; then
                print_info "Creating Storage Directory"
                mkdir -p "${STORAGE_PATH}"
                chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${STORAGE_PATH}"
            fi

            cp -aR "${NGINX_WEBROOT}"/storage/* "${STORAGE_PATH}"
            rm -rf "${NGINX_WEBROOT}"/storage
            ln -s "${STORAGE_PATH}" "${NGINX_WEBROOT}"/storage
            chown -R "${NGINX_USER}":"${NGINX_GROUP}" "${STORAGE_PATH}"
        ;;
    esac
}

laravel_setup_container_mode() {
    modes=$(echo "${LARAVEL_IMAGE_MODE}" | tr "," "\n")
    for mode in $modes; do
        case "${mode,,}" in
            prod* )
                print_info "Laravel Image: Production Mode"
                ENABLE_LARAVEL_ARTISAN_SERVE=FALSE
                ENABLE_LARAVEL_ENV_WATCHER=TRUE
                ENABLE_LARAVEL_NPM_RUN_DEV=FALSE
                ENABLE_LARAVEL_WORKER=TRUE
                ENABLE_CONFIG_REDIRECTION=TRUE
                ENABLE_LOG_REDIRECTION=TRUE
                ENABLE_STORAGE_REDIRECTION=TRUE
            ;;
            develop* | * )
                print_info "Laravel Image: Development Mode"
                ENABLE_LARAVEL_ARTISAN_SERVE=TRUE
                ENABLE_LARAVEL_ENV_WATCHER=TRUE
                ENABLE_LARAVEL_NPM_RUN_DEV=TRUE
                print_info "Consider ENABLE_LARAVEL_WORKER=TRUE for queue processing"
                ENABLE_LARAVEL_WORKER=FALSE
                ENABLE_CONFIG_REDIRECTION=FALSE
                ENABLE_LOG_REDIRECTION=FALSE
                ENABLE_STORAGE_REDIRECTION=FALSE

            ;;
        esac
    done
}

laravel_update_bashrc() {
    if check_container_restarted ; then
        cat <<EOF | silent tee -a /root/.bashrc
artisan() {
    export oldpwd="\$(pwd)"
    cd ${NGINX_WEBROOT}
    sudo -u ${NGINX_USER} php artisan "\$@"
    cd "\${oldpwd}"
    }
EOF
    fi
}
